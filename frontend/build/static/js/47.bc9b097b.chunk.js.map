{"version":3,"file":"static/js/47.bc9b097b.chunk.js","mappings":"iQAQWA,GAAWC,EAAAA,EAAAA,IAAyB,CAC7CC,UAAW,WACXC,eAAgBC,EAAAA,EAChBC,wBAAyB,OACzBC,0BAA2B,CAAC,OAAQ,QACpCC,eAAgB,CAAC,CACfC,SAAU,QACVC,SAAUC,EAAAA,GACT,CACDF,SAAU,QACVC,SAAUE,EAAAA,IAEZC,cAAeA,EAAAA,K,iDChBV,SAASC,EAAiBC,GAAqC,IAApC,WAAEC,EAAU,QAAEC,EAAO,SAAEC,GAAUH,EACjE,MAAMI,GAAOC,EAAAA,EAAAA,UAAQ,KACnB,IAAKJ,IAAeC,IAAYC,EAAU,MAAO,GAEjD,MAAMG,EAAc,IAAIC,IAAIN,EAAWO,KAAIC,GAAK,CAACA,EAAEC,IAAEC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChDF,GAAC,IACJG,YAAa,EACbC,aAAc,EACdC,UAAW,QAoBb,OAhBAZ,EAAQa,SAAQC,IACd,GAAIA,EAAOC,aAAeX,EAAYY,IAAIF,EAAOC,aAAc,CAChDX,EAAYa,IAAIH,EAAOC,aAC/BL,aAAeQ,OAAOJ,EAAOK,SAAW,CAC/C,KAIFlB,EAASY,SAAQO,IACf,GAAIA,EAAQL,aAAeX,EAAYY,IAAII,EAAQL,aAAc,CAClDX,EAAYa,IAAIG,EAAQL,aAChCJ,cAAgBO,OAAOE,EAAQD,SAAW,CACjD,KAIKE,MAAMC,KAAKlB,EAAYmB,UAC3BjB,KAAIC,IACH,MAAMK,EAAYL,EAAEG,YAAcH,EAAEI,aACpC,MAAO,CACLa,KAAMjB,EAAEiB,KACRC,QAASlB,EAAEG,YACXgB,cAAUnB,EAAEI,aACZ,aAAcC,EACf,IAEFe,QAAOpB,GAAKA,EAAEkB,QAAU,GAAKlB,EAAEmB,cAAW,GAAE,GAC9C,CAAC3B,EAAYC,EAASC,IAEnB2B,GAAiBzB,EAAAA,EAAAA,UAAQ,IAC5B0B,IAAUC,EAAAA,EAAAA,GAAeD,GAAOE,QAAQ,MAAO,KAChD,IAGIC,GAAmB7B,EAAAA,EAAAA,UAAQ,IAC9B0B,IAAUC,EAAAA,EAAAA,GAAeD,IAC1B,IAGF,OAAK3B,GAAwB,IAAhBA,EAAK+B,QAShBC,EAAAA,EAAAA,KAACC,EAAAA,EAAmB,CAACC,MAAM,OAAOC,OAAQ,IAAIC,UAC5CC,EAAAA,EAAAA,MAACvD,EAAQ,CAACkB,KAAMA,EAAMsC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,GAAIN,SAAA,EACvEJ,EAAAA,EAAAA,KAACW,EAAAA,EAAa,CAACC,gBAAgB,SAC/BZ,EAAAA,EAAAA,KAACxC,EAAAA,EAAK,CAACqD,QAAQ,UACfb,EAAAA,EAAAA,KAACvC,EAAAA,EAAK,CAACqD,cAAepB,KACtBM,EAAAA,EAAAA,KAACe,EAAAA,EAAO,CAACC,UAAWlB,KACpBE,EAAAA,EAAAA,KAACiB,EAAAA,EAAM,KACPjB,EAAAA,EAAAA,KAAC9C,EAAAA,EAAG,CAAC2D,QAAQ,UAAUK,KAAK,aAC5BlB,EAAAA,EAAAA,KAAC9C,EAAAA,EAAG,CAAC2D,QAAQ,cAAWK,KAAK,aAC7BlB,EAAAA,EAAAA,KAAC9C,EAAAA,EAAG,CAAC2D,QAAQ,aAAaK,KAAK,kBAhBjClB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,oDAAmDf,UAChEJ,EAAAA,EAAAA,KAAA,KAAGmB,UAAU,wBAAuBf,SAAC,wDAmB7C,C","sources":["../node_modules/recharts/es6/chart/BarChart.js","components/charts/PropertyPerfChart.js"],"sourcesContent":["/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import React, { useMemo } from \"react\"\nimport { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\"\nimport { formatCurrency } from \"../../lib/utils\"\n\nexport function PropertyPerfChart({ properties, revenus, expenses }) {\n  const data = useMemo(() => {\n    if (!properties || !revenus || !expenses) return []\n    \n    const propertyMap = new Map(properties.map(p => [p.id, { \n      ...p, \n      totalRevenu: 0, \n      totalExpense: 0, \n      netProfit: 0 \n    }]))\n\n    // Calculate revenues per property\n    revenus.forEach(revenu => {\n      if (revenu.property_id && propertyMap.has(revenu.property_id)) {\n        const prop = propertyMap.get(revenu.property_id)\n        prop.totalRevenu += Number(revenu.amount) || 0\n      }\n    })\n\n    // Calculate expenses per property\n    expenses.forEach(expense => {\n      if (expense.property_id && propertyMap.has(expense.property_id)) {\n        const prop = propertyMap.get(expense.property_id)\n        prop.totalExpense += Number(expense.amount) || 0\n      }\n    })\n\n    // Calculate net profit and prepare chart data\n    return Array.from(propertyMap.values())\n      .map(p => {\n        const netProfit = p.totalRevenu - p.totalExpense\n        return {\n          name: p.name,\n          Revenus: p.totalRevenu,\n          Dépenses: p.totalExpense,\n          \"Profit Net\": netProfit,\n        }\n      })\n      .filter(p => p.Revenus > 0 || p.Dépenses > 0) // Only show properties with data\n  }, [properties, revenus, expenses])\n\n  const yAxisFormatter = useMemo(() => \n    (value) => formatCurrency(value).replace(/\\s/g, ''), \n    []\n  )\n\n  const tooltipFormatter = useMemo(() => \n    (value) => formatCurrency(value), \n    []\n  )\n\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"flex h-[300px] w-full items-center justify-center\">\n        <p className=\"text-sm text-gray-500\">Aucune donnée de propriété à afficher.</p>\n      </div>\n    )\n  }\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <BarChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis tickFormatter={yAxisFormatter} />\n        <Tooltip formatter={tooltipFormatter} />\n        <Legend />\n        <Bar dataKey=\"Revenus\" fill=\"#10b981\" />\n        <Bar dataKey=\"Dépenses\" fill=\"#ef4444\" />\n        <Bar dataKey=\"Profit Net\" fill=\"#3b82f6\" />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}"],"names":["BarChart","generateCategoricalChart","chartName","GraphicalChild","Bar","defaultTooltipEventType","validateTooltipEventTypes","axisComponents","axisType","AxisComp","XAxis","YAxis","formatAxisMap","PropertyPerfChart","_ref","properties","revenus","expenses","data","useMemo","propertyMap","Map","map","p","id","_objectSpread","totalRevenu","totalExpense","netProfit","forEach","revenu","property_id","has","get","Number","amount","expense","Array","from","values","name","Revenus","Dépenses","filter","yAxisFormatter","value","formatCurrency","replace","tooltipFormatter","length","_jsx","ResponsiveContainer","width","height","children","_jsxs","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","dataKey","tickFormatter","Tooltip","formatter","Legend","fill","className"],"sourceRoot":""}